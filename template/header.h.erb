#ifndef __<%= project_name %>_<%= class_name%>__
#define __<%= project_name %>_<%= class_name%>__

#include "cocos2d.h"
#include "extensions/cocos-ext.h"
#include "cocosbuilder/CocosBuilder.h"
<%= header_includes(member_variables) %>

using namespace cocos2d;
using namespace cocosbuilder;


class <%= class_name %>
: public cocos2d::Layer
, public cocosbuilder::CCBSelectorResolver
, public cocosbuilder::CCBMemberVariableAssigner
, public cocosbuilder::NodeLoaderListener
{
public:
    CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(<%= class_name %>, create);

    <%= class_name %>();
    virtual ~<%= class_name %>();

    void openTest(const char* pCCBFileName, const char* nodeName = NULL, cocosbuilder::NodeLoader* nodeLoader = NULL);

    virtual cocos2d::SEL_MenuHandler onResolveCCBCCMenuItemSelector(cocos2d::Ref* pTarget, const char* pSelectorName);
    virtual cocos2d::extension::Control::Handler onResolveCCBCCControlSelector(cocos2d::Ref* pTarget, const char* pSelectorName);
    virtual bool onAssignCCBMemberVariable(cocos2d::Ref* pTarget, const char * pMemberVariableName, cocos2d::Node * node);
    virtual bool onAssignCCBCustomProperty(cocos2d::Ref* pTarget, const char* pMemberVariableName, const cocos2d::Value& pCCBValue);
    virtual void onNodeLoaded(cocos2d::Node* node, cocosbuilder::NodeLoader* nodeLoader);

<% member_variables.each do |var| %>
    <%= typeof(var) %>* get<%= var["memberVarAssignmentName"].sub(/^(_\w)/){|c| c.gsub!(/^_/, ""); c.capitalize } %>(void);
<% end %>

<% controls.each do |control| %>
    void <%= control %>(cocos2d::Ref * sender, cocos2d::extension::Control::EventType pControlEvent);
<% end if controls %>

private:
<% member_variables.each do |var| %>
   <%= typeof(var) %>* <%= var["memberVarAssignmentName"] %>;
<% end %>
<% custom_properties.each do |property| %>
   <% t = property_type[property["type"]] -%>
   <%=  t == 'string' ? 'std::string' : t %> <%= property["name"] %>;
<% end if custom_properties %>
};

#endif /* defined(__<%= project_name %>__<%= class_name %>__) */
